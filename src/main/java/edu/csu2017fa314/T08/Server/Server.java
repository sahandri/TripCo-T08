package edu.csu2017fa314.T08.Server;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import edu.csu2017fa314.T08.View.Itinerary;
import edu.csu2017fa314.T08.View.makeSvg;
import spark.Request;
import spark.Response;
import org.json.JSONObject;
import org.json.JSONArray;
import java.util.ArrayList;
import java.util.Arrays;
import static spark.Spark.post;

public class Server {
    public static void main(String[] args) {
        Server s = new Server();
        s.serve();
    }

    public void serve() {
        post("/testing", (rec, res) -> {
            return testing(rec, res).toString();
        }); // Create new listener
    }


	private JSONObject serveInitialDests(String search) {
        JSONArray itinerary = Itinerary.createJSON(search);
        JSONObject response = new JSONObject();
        JSONObject svg = new JSONObject();
        svg.put("width", 1067);
        svg.put("height", 784);
        //svg.put("contents", makeSvg.getSvg(search, 0));
	svg.put("contents", makeSvg.getBlankSvg());		//This will load dest list faster
        response.put("itinerary", itinerary);
        response.put("svg", svg);
        return response;
    }

    private JSONObject serveResponse(String destList, int optLevel) {
		//int opt level is used for selection of optimization
	JSONArray itinerary = Itinerary.createJSON(parseIDString(destList) , optLevel);	
	for(String dest : parseIDString(destList)){
		System.out.println(dest);
	}
        JSONObject svg = new JSONObject();
        svg.put("width", 800);
        svg.put("height", 400);
        svg.put("contents", makeSvg.getArraySvg(parseIDString(destList), optLevel));
        JSONObject response = new JSONObject();
        response.put("itinerary", itinerary);
        response.put("svg",svg);
        return response;
    }

	private JSONObject serveBlank(String search) {
        JSONArray itinerary = new JSONArray();
		JSONObject svg = new JSONObject();
        svg.put("width", 1067);
        svg.put("height", 784);
        svg.put("contents", makeSvg.getBlankSvg());
        JSONObject response = new JSONObject();
        response.put("itinerary", itinerary);
		response.put("svg",svg);
        return response;
    }

    private Object testing(Request rec, Response res) {
        // Set the return headers
        setHeaders(res);

        // Init json parser
        JsonParser parser = new JsonParser();

        // Grab the json body from POST
        JsonElement elm = parser.parse(rec.body());
        // Create new Gson (a Google library for creating a JSON representation of a java class)
        Gson gson = new Gson();

        // Create new Object from received JsonElement elm
        // Note that both possible requests have the same format (see app.js)
        ServerRequest sRec = gson.fromJson(elm, ServerRequest.class);

        // The object generated by the frontend should match whatever class you are reading into.
        // Notice how DataClass has name and ID and how the frontend is generating an object with name and ID.
        System.out.println("Got \"" + sRec.toString() + "\" from server.");
		// Because both possible requests from the client have the same format, 
        // we can check the "type" of request we've received: either "search" , "plan" , or "clear"
		// if the user types a search, this returns an initial list of destinations
        if (sRec.getRequest().equals("search")) {
            // Set the return headers
            System.out.println("Performing search for " + sRec.getDescription());
            return serveInitialDests(sRec.getDescription());
		// if the user selects destinations and selects "plan1", this returns unordered trip
        } else if (sRec.getRequest().equals("plan")) {
            return serveResponse(sRec.getDescription(), 0);
		// if the user selects destinations and selects "plan1", this searches NN
        } else if (sRec.getRequest().equals("plan1")) {
            return serveResponse(sRec.getDescription(), 1);
		// if the user selects destinations and selects "plan2", this searches 2-Opt
		} else if (sRec.getRequest().equals("plan2")) {
            return serveResponse(sRec.getDescription(), 2);
		// if the user selects destinations and selects "plan2", this searches 3-Opt
		} else if (sRec.getRequest().equals("plan3")) {
            return serveResponse(sRec.getDescription(), 3);
        // if "clear is chosen, blank world svg is sent and diplayed with empty list
        } else {
            return serveBlank(sRec.getDescription());
        }
}

    private void setHeaders(Response res) {
        // Declares returning type json
        res.header("Content-Type", "application/json");
        // Ok for browser to call even if different host host
        res.header("Access-Control-Allow-Origin", "*");
        res.header("Access-Control-Allow-Headers", "*");
    }

	private ArrayList<String> parseIDString(String destList) {
		//int opt level is used for selection of optimization        		
		String[] dests = destList.split(",");
        return new ArrayList<>(Arrays.asList(dests));
    }
}
